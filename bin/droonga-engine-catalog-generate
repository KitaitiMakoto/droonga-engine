#!/usr/bin/env ruby
#
# Copyright (C) 2014 Droonga Project
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

require "ostruct"
require "optparse"
require "json"
require "pathname"

require "droonga/engine/version"
require "droonga/catalog/generator"
require "droonga/safe_file_writer"
require "droonga/service_installation"

service_installation = Droonga::ServiceInstallation.new
service_installation.ensure_using_service_base_directory

generator = Droonga::Catalog::Generator.new
current_dataset = {}
datasets = {
  Droonga::Catalog::Generator::DEFAULT_DATASET => current_dataset
}

options = OpenStruct.new
if service_installation.user_exist?
  options.output_path = Droonga::Path.catalog
else
  options.output_path = "-"
end
parser = OptionParser.new
parser.version = Droonga::Engine::VERSION
parser.on("--output=PATH",
          "The output path of generated catalog.json to be saved as.",
          "\"-\" means the standard output.",
          "(#{options.output_path})") do |path|
  options.output_path = path
end
parser.on("--dataset=NAME",
          "The name of a new dataset.",
          "This can be specified multiple times to define multiple datasets.",
          "(#{Droonga::Catalog::Generator::DEFAULT_DATASET})") do |name|
  current_dataset = datasets[name] = {}
end
parser.on("--n-workers=N", Integer,
          "Number of workers for each volume in the dataset ",
          "specified by the preceding --dataset option.",
          "(#{Droonga::Catalog::Generator::DEFAULT_N_WORKERS})") do |n|
  current_dataset[:n_workers] = n
end
parser.on("--hosts=NAME1,NAME2,...", Array,
          "Host names of engine nodes to be used as replicas in the dataset ",
          "specified by the preceding --dataset option.",
          "(#{Droonga::Catalog::Generator::DEFAULT_HOSTS.join(",")})") do |hosts|
  current_dataset[:hosts] = hosts
end
parser.on("--port=PORT", Integer,
          "Port number to communicate with engine nodes in the dataset ",
          "specified by the preceding --dataset option.",
          "(#{Droonga::Catalog::Generator::DEFAULT_PORT})") do |port|
  current_dataset[:port] = port
end
parser.on("--tag=TAG",
          "Tag name to communicate with engine nodes in the dataset ",
          "specified by the preceding --dataset option.",
          "(#{Droonga::Catalog::Generator::DEFAULT_TAG})") do |tag|
  current_dataset[:tag] = tag
end
parser.on("--n-slices=N", Integer,
          "Number of slices for each replica in the dataset ",
          "specified by the preceding --dataset option.",
          "(#{Droonga::Catalog::Generator::DEFAULT_N_SLICES})") do |n|
  current_dataset[:n_slices] = n
end
parser.on("--plugins=PLUGIN1,PLUGIN2,...", Array,
          "Plugin names activated for the dataset ",
          "specified by the preceding --dataset option.",
          "(#{Droonga::Catalog::Generator::DEFAULT_PLUGINS.join(",")})") do |plugins|
  current_dataset[:plugins] = plugins
end
parser.on("--schema=PATH",
          "The path to a JSON file including schema definition for the dataset ",
          "specified by the preceding --dataset option.") do |path|
  File.open(path) do |input|
    current_dataset[:schema] = JSON.parse(input.read)
  end
end
parser.on("--fact=TABLE",
          "Name of the fact table in the dataset ",
          "specified by the preceding --dataset option.") do |table|
  current_dataset[:fact] = table
end
parser.on("--replicas=PATH",
          "The path to a JSON file including replicas definition for the dataset ",
          "specified by the preceding --dataset option.",
          "If this option is used, other options to define replicas in the dataset ",
          "(--hosts, --port, --tag and --n-slices) are ignored.") do |path|
  File.open(path) do |input|
    current_dataset[:replicas] = JSON.parse(input.read)
  end
end
parser.parse!(ARGV)

if datasets[Droonga::Catalog::Generator::DEFAULT_DATASET].empty?
  datasets.delete(Droonga::Catalog::Generator::DEFAULT_DATASET)
end

if service_installation.user_exist? and
     options.output_path == Droonga::Path.catalog
  options.for_service = true
end

datasets.each do |name, options|
  generator.add_dataset(name, options)
end

def open_output(path)
  if path == "-"
    yield($stdout, nil)
  else
    Droonga::SafeFileWriter.write(path) do |output, file|
      yield(output, file)
    end
  end
end

catalog = generator.generate
open_output(options.output_path) do |output, file|
  output.puts(JSON.pretty_generate(catalog))
  if file and options.for_service
    service_installation.ensure_correct_file_permission(file)
  end
end
