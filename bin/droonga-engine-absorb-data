#!/usr/bin/env ruby
#
# Copyright (C) 2014 Droonga Project
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

require "ostruct"
require "optparse"
require "open3"

require "droonga/engine/version"
require "droonga/catalog_generator"
require "droonga/path"
require "droonga/data_absorber"
require "droonga/serf"
require "droonga/client"

options = OpenStruct.new
options.port    = Droonga::CatalogGenerator::DEFAULT_PORT
options.tag     = Droonga::CatalogGenerator::DEFAULT_TAG
options.dataset = Droonga::CatalogGenerator::DEFAULT_DATASET
options.remote  = true
parser = OptionParser.new
parser.version = Droonga::Engine::VERSION

parser.separator("")
parser.separator("Connection:")
parser.on("--source-host=HOST",
          "Host name of the source cluster to be connected.") do |host|
  options.source_host = host
end
parser.on("--destination-host=HOST",
          "Host name of this cluster to be connected.") do |host|
  options.destination_host = host
end
parser.on("--port=PORT", Integer,
          "Port number of the source cluster to be connected.",
          "(#{options.port})") do |port|
  options.port = port
end
parser.on("--[no-]remote",
          "Run command in remote node or not.",
          "(#{options.remote})") do |remote|
  options.remote = remote
end

parser.separator("")
parser.separator("Data:")
parser.on("--tag=TAG",
          "Tag name to be used to communicate with Droonga system.",
          "(#{options.tag})") do |tag|
  options.tag = tag
end
parser.on("--dataset=DATASET",
          "Dataset to be absorbed.",
          "(#{options.dataset})") do |dataset|
  options.dataset = dataset
end

parser.parse!(ARGV)

unless options.source_host
  raise "You must specify the source host via --source-host option."
end
unless options.destination_host
  raise "You must specify the destination host via --destination-host option."
end

source_node      = "#{options.source_host}:#{options.port}/#{options.tag}"
destination_node = "#{options.destination_host}:#{options.port}/#{options.tag}"

def run_remote_command(target, command, options)
  serf = Droonga::Serf.new(nil, target)
  result = serf.send_query(command, options)
  #puts result[:result]
  puts result[:error] unless result[:error].empty?
  result[:response]
end

puts "Start to absorb data from #{options.source_host}"
puts "                       to #{options.destination_host}"
puts "  dataset = #{options.dataset}"
puts "  port    = #{options.port}"
puts "  tag     = #{options.tag}"
puts ""
puts "Absorbing..."

absorber_options = {
  :dataset          => options.dataset,
  :source_host      => options.source_host,
  :destination_host => options.destination_host,
  :port             => options.port,
  :tag              => options.tag,
}
absorber = Droonga::DataAbsorber.new(absorber_options)

if options.remote
  start_time_in_seconds = Time.new.to_i
  run_remote_command(destination_node, "absorb_data",
                     "node"    => destination_node,
                     "source"  => options.source_host,
                     "port"    => options.port,
                     "tag"     => options.tag,
                     "dataset" => options.dataset)
  while true
    sleep(3)
    response = run_remote_command(destination_node, "report_status",
                                  "node" => destination_node,
                                  "key" => "absorbing")
    if response
      absorbing = response["value"]
      break unless absorbing
    end

    progress = absorber.report_progress(start_time_in_seconds)
    puts(progress) if progress
  end
  response = run_remote_command(source_node, "report_status",
                                "node" => source_node,
                                "key" => "last_processed_message_timestamp")
  timestamp = response["value"]
  puts "The timestamp of the last processed message in the source node: #{timestamp}"
  if timestamp and not timestamp.empty?
    puts "Setting effective message timestamp for the destination node..."
    response = run_remote_command(destination_node, "set_status",
                                  "node" => destination_node,
                                  "key" => "effective_message_timestamp",
                                  "value" => timestamp)
  end
else
  absorber.absorb do |live_status|
    if live_status[:progress]
      puts live_status[:progress]
    else
      puts live_status[:output]
    end
  end
  response = run_remote_command(source_node, "report_status",
                                "node" => source_node,
                                "key" => "last_processed_message_timestamp")
  timestamp = response["value"]
  puts "The timestamp of the last processed message in the source node: #{timestamp}"
  if timestamp and not timestamp.empty?
    status = NodeStatus.new
    status.set(:effective_message_timestamp, timestamp)
  end
end
puts "Done."

exit(true)
