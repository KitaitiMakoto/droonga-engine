#!/usr/bin/env ruby
#
# Copyright (C) 2014 Droonga Project
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

require "ostruct"
require "optparse"
require "json"
require "pathname"

require "droonga/engine/version"
require "droonga/path"
require "droonga/catalog_generator"
require "droonga/safe_file_writer"
require "droonga/data_absorber"
require "droonga/serf"

options = OpenStruct.new
options.base_dir = ENV[Droonga::Path::BASE_DIR_ENV_NAME] || Dir.pwd
options.drndump  = "drndump"
options.client   = "droonga-request"
options.copy     = true
options.port     = Droonga::CatalogGenerator::DEFAULT_PORT
options.tag      = Droonga::CatalogGenerator::DEFAULT_TAG

parser = OptionParser.new
parser.version = Droonga::Engine::VERSION

parser.on("--base-dir=PATH",
          "Path to the base directory the catalog.json is located in.",
          "(#{options.base_dir})") do |path|
  options.base_dir = path
end

parser.on("--[no-]copy",
          "Do or don't copy data from the source cluster.",
          "(#{options.copy})") do |copy|
  options.copy = copy
end

parser.separator("")
parser.separator("Connections:")
parser.on("--host=HOST",
          "Host name of the node to be joined.") do |host|
  options.joining_host = host
end
parser.on("--replica-source-host=HOST",
          "Host name of the soruce cluster to be connected.") do |host|
  options.replica_source_host = host
end
parser.on("--dataset=DATASET",
          "Tag dataset name of the cluster to be joined as a node.",
          "(#{options.dataset})") do |dataset|
  options.dataset = dataset
end
parser.on("--port=PORT", Integer,
          "Port number of the source cluster to be connected.",
          "(#{options.port})") do |port|
  options.port = port
end
parser.on("--tag=TAG",
          "Tag name of the soruce cluster to be connected.",
          "(#{options.tag})") do |tag|
  options.tag = tag
end

parser.parse!(ARGV)


base_dir = Pathname(options.base_dir).expand_path
ENV[Droonga::Path::BASE_DIR_ENV_NAME] = base_dir.to_s

catalog_path = Droonga::Path.catalog
unless catalog_path.exist?
  raise "Cannot load 'catalog.json'. You must specify correct path " +
          "to the base directory via --base-dir option."
end
source_catalog = JSON.parse(catalog_path.read)


unless options.joining_host
  raise "You must specify the host name or the IP address of the node " +
          "to be joined via --host option."
end
unless options.replica_source_host
  raise "You must specify the host name or the IP address of a node " +
           "of an existing cluster via --replica-source-host option."
end


generator = Droonga::CatalogGenerator.new
generator.load(source_catalog)

dataset = generator.dataset_for_host(options.replica_source_host)
if dataset
  if generator.dataset_for_host(options.joining_host)
    raise "The joining node is already a member of the cluster. " +
            "You cannot join a member twice."
  end

  options.dataset = dataset.name
  options.tag     = dataset.replicas.tag
  options.port    = dataset.replicas.port
end

options.joining_node = "#{options.joining_host}:#{options.port}/#{options.tag}"
options.source_node  = "#{options.replica_source_host}:#{options.port}/#{options.tag}"

def run_remote_command(target, command, options)
  result = Droonga::Serf.send_query(target, command, options)
  puts result[:result]
  puts result[:error] unless result[:error].empty?
  result[:response]
end

=begin
XXX disable fetching until it become working
puts "Preparing to fetch cluster information..."
publish_port = 10032 + rand(10000)
run_remote_command(options.source_node, "publish_catalog",
                   "node" => options.source_node,
                   "port" => publish_port)
sleep(3) # wait until the HTTP server becomes ready
=end

puts "Joining new replica to the cluster..."
run_remote_command(options.joining_node, "join",
                   "node"   => options.joining_node,
                   "type"   => "replica",
                   "source" => options.source_node,
#                   "fetch_port" => publish_port,
                   "copy"   => options.copy)
sleep(5) #TODO: wait for restarting of the joining node. this should be done more safely.

while true
  sleep(3)
  response = run_remote_command(options.joining_node, "report_status",
                                "node" => options.joining_node,
                                "key" => "absorbing")
  absorbing = response["value"]
  break unless absorbing
end

puts "Update existing hosts in the cluster..."
run_remote_command(options.source_node, "add_replicas",
                   "dataset" => options.dataset,
                   "hosts"   => [options.joining_host])

=begin
XXX disable fetching until it become working
run_remote_command(options.source_node, "unpublish_catalog",
                   "node" => options.source_node,
                   "port" => publish_port)
=end

puts "Done."

exit(true)
