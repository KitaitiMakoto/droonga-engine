#!/usr/bin/env ruby
#
# Copyright (C) 2014 Droonga Project
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

require "slop"
require "json"
require "pathname"

require "droonga/engine/version"
require "droonga/path"
require "droonga/catalog_generator"
require "droonga/safe_file_writer"
require "droonga/data_absorber"
require "droonga/serf"

options = nil
begin
  options = Slop.parse(:help => true) do |option|
    option.on("no-copy", "Don't copy data from the source cluster.",
              :default => false)

    option.separator("Connections:")
    option.on(:host=,
              "Host name of the node to be joined.",
              :required => true)
    option.on("replica-source-host=",
              "Host name of the soruce cluster to be connected.",
              :required => true)
    option.on(:dataset=,
              "Tag dataset name of the cluster to be joined as a node.",
              :default => Droonga::CatalogGenerator::DEFAULT_DATASET)
    option.on(:port=,
              "Port number of the source cluster to be connected.",
              :as => Integer,
              :default => Droonga::CatalogGenerator::DEFAULT_PORT)
    option.on(:tag=,
              "Tag name of the soruce cluster to be connected.",
              :default => Droonga::CatalogGenerator::DEFAULT_TAG)
  end
rescue Slop::MissingOptionError => e
  $stderr.puts(e)
  exit(false)
end

joining_node = "#{options[:host]}:#{options[:port]}/#{options[:tag]}"
source_node  = "#{options["replica-source-host"]}:#{options[:port]}/#{options[:tag]}"

def run_remote_command(target, command, options)
  serf = Droonga::Serf.new(nil, target)
  result = serf.send_query(command, options)
  #puts(result[:result])
  puts(result[:error]) unless result[:error].empty?
  result[:response]
end

absorber_options = {
  :dataset          => options[:dataset],
  :source_host      => options["replica-source-host"],
  :destination_host => options[:host],
  :port             => options[:port],
  :tag              => options[:tag],
}
absorber = Droonga::DataAbsorber.new(absorber_options)

start_time_in_seconds = Time.new.to_i
puts("Joining new replica to the cluster...")
run_remote_command(joining_node, "join",
                   "node"    => joining_node,
                   "type"    => "replica",
                   "source"  => source_node,
                   "dataset" => options[:dataset],
                   "copy"    => !options["no-copy"])
sleep(5) #TODO: wait for restarting of the joining node. this should be done more safely.

unless options["no-copy"]
  last_progress = ""
  while true
    sleep(3)
    response = run_remote_command(joining_node, "report_status",
                                  "node" => joining_node,
                                  "key"  => "absorbing")
    if response
      absorbing = response["value"]
      break unless absorbing
    end

    progress = absorber.report_progress(start_time_in_seconds)
    if progress
      printf("%s", "#{" " * last_progress.size}\r")
      printf("%s", "#{progress}\r")
      last_progress = progress
    end
  end
  puts ""
end

response = run_remote_command(source_node, "report_status",
                              "node" => source_node,
                              "key" => "last_processed_message_timestamp")
timestamp = response["value"]
if timestamp and not timestamp.empty?
  puts "The timestamp of the last processed message in the source node: #{timestamp}"
  puts "Setting effective message timestamp for the destination node..."
  response = run_remote_command(destination_node, "set_status",
                                "node" => destination_node,
                                "key" => "effective_message_timestamp",
                                "value" => timestamp)
end

puts("Update existing hosts in the cluster...")
run_remote_command(source_node, "add_replicas",
                   "dataset" => options[:dataset],
                   "hosts"   => [options[:host]])


puts("Done.")

exit(true)
