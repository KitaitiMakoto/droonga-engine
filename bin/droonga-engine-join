#!/usr/bin/env ruby
#
# Copyright (C) 2014 Droonga Project
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

require "slop"
require "json"
require "pathname"

require "droonga/engine/version"
require "droonga/path"
require "droonga/catalog_generator"
require "droonga/safe_file_writer"
require "droonga/data_absorber"
require "droonga/serf"

options = nil
begin
  options = Slop.parse(:help => true) do |opt|
    opt.on "no-copy", "copy data from the source cluster.", 
      :default => false

    opt.separator "Connections:"
    opt.on :host=, 
      "Host name of the node to be joined.", 
      :required => true
    opt.on "replica-source-host=", 
      "Host name of the soruce cluster to be connected.",
      :required => true
    opt.on :dataset=,
      "Tag dataset name of the cluster to be joined as a node.", 
      :default => Droonga::CatalogGenerator::DEFAULT_DATASET
    opt.on :port=, 
      "Port number of the source cluster to be connected.", 
      :as => Integer, 
      :default => Droonga::CatalogGenerator::DEFAULT_PORT
    opt.on :tag=, 
      "Tag name of the soruce cluster to be connected.", 
      :default => Droonga::CatalogGenerator::DEFAULT_TAG
  end
rescue Slop::MissingOptionError => e
  STDERR.puts e
  exit -1
end

joining_node = "#{options[:host]}:#{options[:port]}/#{options[:tag]}"
source_node  = "#{options["replica-source-host"]}:#{options[:port]}/#{options[:tag]}"

def run_remote_command(target, command, options)
  p [command, options]
  result = Droonga::Serf.send_query(target, command, options)
  puts result[:result]
  puts result[:error] unless result[:error].empty?
  result[:response]
end

p [joining_node, source_node]

puts "Joining new replica to the cluster..."
run_remote_command(joining_node, "join",
                   "node"   => joining_node,
                   "type"   => "replica",
                   "source" => source_node,
                   "port" => options[:port],
                   "dataset" => options[:dataset],
                   "tag" => options[:tag],
                   "copy"   => !options["no-copy"])
sleep(5) #TODO: wait for restarting of the joining node. this should be done more safely.

while true
  sleep(3)
  response = run_remote_command(joining_node, "report_status",
                                "node" => joining_node,
                                "key" => "absorbing")
  absorbing = response["value"]
  break unless absorbing
end

puts "Update existing hosts in the cluster..."
run_remote_command(source_node, "add_replicas",
                   "dataset" => options[:dataset],
                   "hosts"   => [options[:host]])


puts "Done."

exit(true)
