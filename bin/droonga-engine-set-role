#!/usr/bin/env ruby
#
# Copyright (C) 2014 Droonga Project
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

require "slop"
require "socket"

require "droonga/engine/version"
require "droonga/node_name"
require "droonga/serf"

module Droonga
  class SetRoleCommand
    def run
      parse_options
      puts "Setting role of #{@options[:host]} to #{@options[:role]}..."
      set_node_role
      puts("Done.")
      exit(true)
    end

    private
    def parse_options
      options = Slop.parse(:help => true) do |option|
        option.on(:role=,
                  "New role for the target node.",
                  :required => true)

        option.separator("Connections:")
        option.on(:host=,
                  "Host name of the target node.",
                  :required => true)
        option.on("receiver-host=",
                  "Host name of this host.",
                  :default => Socket.gethostname)
        option.on(:dataset=,
                  "Dataset name of for the target node.",
                  :default => NodeName::DEFAULT_DATASET)
        option.on(:port=,
                  "Port number of the source cluster to be connected.",
                  :as => Integer,
                  :default => NodeName::DEFAULT_PORT)
        option.on(:tag=,
                  "Tag name of the soruce cluster to be connected.",
                  :default => NodeName::DEFAULT_TAG)

        option.separator("Miscellaneous:")
        option.on(:verbose, "Output details for internal operations.",
                  :default => false)
      end
      @options = options
    rescue Slop::MissingOptionError => error
      $stderr.puts(error)
      exit(false)
    end

    def target_node
      "#{@options[:host]}:#{@options[:port]}/#{@options[:tag]}"
    end

    def target_node_serf
      @target_node_serf ||= Serf.new(target_node,
                                     :verbose => @options[:verbose])
    end

    def set_node_role
      target_node_serf.ensure_restarted do
        target_node_serf.send_query("change_role",
                                    "node" => target_node,
                                    "role" => @options[:role])
      end
    end
  end
end

Droonga::SetRoleCommand.new.run
