#!/usr/bin/env ruby
#
# Copyright (C) 2014 Droonga Project
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

require "ostruct"
require "optparse"
require "json"
require "pathname"

require "droonga/engine/version"
require "droonga/catalog/generator"
require "droonga/safe_file_writer"
require "droonga/service_installation"

service_installation = Droonga::ServiceInstallation.new
service_installation.ensure_using_service_base_directory

generator = Droonga::Catalog::Generator.new
current_dataset = {}
datasets = {
  Droonga::Catalog::Generator::DEFAULT_DATASET => current_dataset
}

options = OpenStruct.new
options.output_path = "-"
if service_installation.user_exist?
  options.source_path = Droonga::Path.catalog
  options.update      = true
else
  options.source_path = "./catalog.json"
  options.update      = false
end
parser = OptionParser.new
parser.version = Droonga::Engine::VERSION
parser.on("--source=PATH",
          "Path to an existing catalog.json.",
          "\"-\" means the standard input.",
          "(#{options.source_path})") do |path|
  options.source_path = path
end
parser.on("--output=PATH",
          "Output catalog.json to PATH.",
          "\"-\" means the standard output.",
          "(#{options.output_path})") do |path|
  options.output_path = path
end
parser.on("--[no-]update",
          "Update the source file itself, or not.",
          "(#{options.update})") do |update|
  options.update = update
end
parser.on("--dataset=NAME",
          "Add a dataset its name is NAME.",
          "And set the NAME to the current dataset.",
          "(#{Droonga::Catalog::Generator::DEFAULT_DATASET})") do |name|
  current_dataset = datasets[name] = {}
end
parser.on("--replica-hosts=NAME1,NAME2,...", Array,
          "Use given hosts as replicas for the current dataset.") do |hosts|
  current_dataset[:replica_hosts] = hosts
end
parser.on("--add-replica-hosts=NAME1,NAME2,...", Array,
          "Use given hosts to be added as replicas to the current dataset.") do |hosts|
  current_dataset[:add_replica_hosts] = hosts
end
parser.on("--remove-replica-hosts=NAME1,NAME2,...", Array,
          "Use given hosts to be removed as replicas from the current dataset.") do |hosts|
  current_dataset[:remove_replica_hosts] = hosts
end
parser.parse!(ARGV)

if options.source_path != "-" and options.update
  options.output_path = options.source_path
end
if service_installation.user_exist? and
     options.output_path == Droonga::Path.catalog
  options.for_service = true
end

def load_source(path)
  source = nil
  if path == "-"
    source = $stdin.read
  else
    source_path = Pathname(path).expand_path
    source = source_path.read
  end
  JSON.parse(source)
end

source_catalog = load_source(options.source_path)
generator.load(source_catalog)
generator.modify(datasets)

def open_output(path)
  if path == "-"
    yield($stdout, nil)
  else
    Droonga::SafeFileWriter.write(path) do |output, file|
      yield(output, file)
    end
  end
end

catalog = generator.generate
open_output(options.output_path) do |output, file|
  output.puts(JSON.pretty_generate(catalog))
  if file and options.for_service
    service_installation.ensure_correct_file_permission(file)
  end
end
