#!/usr/bin/env ruby
#
# Copyright (C) 2014-2015 Droonga Project
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

require "socket"

require "droonga/command/remote_command_base"
require "droonga/node_name"
require "droonga/catalog/dataset"
require "droonga/catalog/loader"
require "droonga/catalog/fetcher"
require "droonga/catalog/generator"
require "droonga/serf"

module Droonga
  module Command
    class Unjoin << RemoteCommandBase
      def run
        parse_options do |option|
          option.on("receiver-host=",
                    "Host name of this host.",
                    :default => Socket.gethostname)
          option.on(:dataset=,
                    "Dataset name of for the node to be unjoined.",
                    :default => Catalog::Dataset::DEFAULT_NAME)
        end

        puts "Start to unjoin a node #{node.to_s}"
        puts "                    by #{@options["receiver-host"]} (this host)"
        puts ""

        succeeded = do_unjoin

        puts("Done.") if succeeded
        succeeded
      end

      def replica_remove_host
        host
      end

      def replica_remove_node
        node
      end

      def dataset_name
        @options[:dataset]
      end

      def cluster_id
        catalog.cluster_id
      end

      def catalog
        @catalog ||= parse_catalog
      end

      def parse_catalog
        loader = Catalog::Loader.new
        loader.parse(raw_catalog)
      end

      def raw_catalog
        @raw_catalog ||= fetch_catalog
      end

      def fetch_catalog
        fetcher = Catalog::Fetcher.new(:host          => replica_remove_host,
                                       :port          => port,
                                       :tag           => tag,
                                       :receiver_host => @options["receiver-host"])
        fetcher.fetch(:dataset => dataset_name)
      end

      def remaining_node
        @remaining_node ||= prepare_remaining_node
      end

      def remaining_node_serf
        @remaining_node_serf ||= Serf.new(remaining_node.to_s,
                                          :verbose => @options[:verbose])
      end

      def prepare_remaining_node
        generator = Catalog::Generator.new
        generator.load(raw_catalog)

        dataset = generator.dataset_for_host(replica_remove_host)
        unless dataset
          raise "Specified host #{replica_remove_host} is not a member of "+
                  "the cluster. You must specify correct host via --replica-remove-host " +
                  "option."
        end

        other_hosts = dataset.replicas.hosts

        remaining_host = other_hosts.first || replica_remove_host
        NodeName.new(:host => remaining_host,
                     :port => port,
                     :tag  => tag)
      end

      def do_unjoin
        puts "Unjoining replica from the cluster..."

        remaining_node_serf.ensure_restarted do
          remaining_node_serf.send_query("unjoin",
                                         "cluster_id" => cluster_id,
                                         "dataset"    => dataset_name,
                                         "hosts"      => [replica_remove_host])
        end
      end
    end
  end
end

exit(Droonga::Command::Unjoin.new.run)
