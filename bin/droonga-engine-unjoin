#!/usr/bin/env ruby
#
# Copyright (C) 2014 Droonga Project
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

require "ostruct"
require "optparse"
require "json"
require "pathname"

require "droonga/engine/version"
require "droonga/path"
require "droonga/catalog_generator"
require "droonga/safe_file_writer"
require "droonga/serf"

options = OpenStruct.new
options.base_dir = ENV[Droonga::Path::BASE_DIR_ENV_NAME] || Dir.pwd

parser = OptionParser.new
parser.version = Droonga::Engine::VERSION

parser.on("--base-dir=PATH",
          "Path to the base directory the catalog.json is located in.",
          "(#{options.base_dir})") do |path|
  options.base_dir = path
end
parser.on("--host=HOST",
          "Host name of the replica removed from cluster.") do |host|
  options.replica_remove_host = host
end

parser.parse!(ARGV)


base_dir = Pathname(options.base_dir).expand_path
ENV[Droonga::Path::BASE_DIR_ENV_NAME] = base_dir.to_s

catalog_path = Droonga::Path.catalog
unless catalog_path.exist?
  raise "Cannot load 'catalog.json'. You must specify correct path " +
          "to the base directory via --base-dir option."
end

unless options.replica_remove_host
  raise "You must specify the host name or the IP address of a node to " +
          "be removed from the cluster via --replica-remove-host option."
end

source_catalog = JSON.parse(catalog_path.read)
generator = Droonga::CatalogGenerator.new
generator.load(source_catalog)

dataset = generator.dataset_for_host(options.replica_remove_host)
unless dataset
  raise "Specified host #{options.replica_remove_host} is not a member of "+
          "the cluster. You must specify correct host via --replica-remove-host " +
          "option."
end

options.dataset     = dataset.name
options.tag         = dataset.replicas.tag
options.port        = dataset.replicas.port
options.other_hosts = dataset.replicas.hosts

remaining_host = options.other_hosts.first || options.replica_remove_host
options.remaining_node = "#{remaining_host}:#{options.port}/#{options.tag}"


puts "Unjoining replica from the cluster..."

result = Droonga::Serf.send_query(options.remaining_node, "remove_replicas",
                                  "dataset" => options.dataset,
                                  "hosts"   => [options.replica_remove_host])
puts result[:output]
puts result[:error] unless result[:error].empty?

puts "Done."

exit(true)
